// Code generated by protoc-gen-micro-gateway. DO NOT EDIT.
// source: github.com/partitio/atlas-gentool/testdata/test.proto

/*
Package test is a reverse proxy.

It translates gRPC into RESTful JSON APIs.
*/
package test

import (
	"io"
	"net/http"

	"github.com/golang/protobuf/proto"
	"github.com/partitio/micro-gateway/runtime"
	"github.com/partitio/micro-gateway/utilities"
	"golang.org/x/net/context"
	"google.golang.org/grpc/codes"
	"google.golang.org/grpc/status"
)

var _ codes.Code
var _ io.Reader
var _ status.Status
var _ = runtime.String
var _ = utilities.NewDoubleArray

var (
	filter_ExampleService_Something_0 = &utilities.DoubleArray{Encoding: map[string]int{}, Base: []int(nil), Check: []int(nil)}
)

func request_ExampleService_Something_0(ctx context.Context, marshaler runtime.Marshaler, client ExampleService, req *http.Request, pathParams map[string]string) (proto.Message, error) {
	var protoReq Example

	if err := runtime.PopulateQueryParameters(&protoReq, req.URL.Query(), filter_ExampleService_Something_0); err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "%v", err)
	}

	msg, err := client.Something(ctx, &protoReq)
	return msg, err

}

var (
	filter_ExampleService_Create_0 = &utilities.DoubleArray{Encoding: map[string]int{}, Base: []int(nil), Check: []int(nil)}
)

func request_ExampleService_Create_0(ctx context.Context, marshaler runtime.Marshaler, client ExampleService, req *http.Request, pathParams map[string]string) (proto.Message, error) {
	var protoReq Example

	if err := runtime.PopulateQueryParameters(&protoReq, req.URL.Query(), filter_ExampleService_Create_0); err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "%v", err)
	}

	msg, err := client.Create(ctx, &protoReq)
	return msg, err

}

var (
	filter_ExampleService_Test_0 = &utilities.DoubleArray{Encoding: map[string]int{}, Base: []int(nil), Check: []int(nil)}
)

func request_ExampleService_Test_0(ctx context.Context, marshaler runtime.Marshaler, client ExampleService, req *http.Request, pathParams map[string]string) (proto.Message, error) {
	var protoReq Example

	if err := runtime.PopulateQueryParameters(&protoReq, req.URL.Query(), filter_ExampleService_Test_0); err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "%v", err)
	}

	msg, err := client.Test(ctx, &protoReq)
	return msg, err

}

// RegisterExampleServiceHandler registers the http handlers for service ExampleService to "mux".
// The handlers forward requests to the grpc endpoint over "conn".
// func RegisterExampleServiceHandler(ctx context.Context, mux *runtime.ServeMux, conn *grpc.ClientConn) error {
//  	return RegisterExampleServiceHandlerClient(ctx, mux, NewExampleServiceClient(conn))
//}

// RegisterExampleServiceHandlerService registers the http handlers for service ExampleService
// to "mux". The handlers forward requests to the micro service endpoint over the given implementation of "ExampleService".
func RegisterExampleServiceHandlerService(ctx context.Context, mux *runtime.ServeMux, client ExampleService) error {

	mux.Handle("GET", pattern_ExampleService_Something_0, func(w http.ResponseWriter, req *http.Request, pathParams map[string]string) {
		ctx, cancel := context.WithCancel(req.Context())
		defer cancel()
		inboundMarshaler, outboundMarshaler := runtime.MarshalerForRequest(mux, req)
		rctx, err := runtime.AnnotateContext(ctx, mux, req)
		if err != nil {
			runtime.HTTPError(ctx, mux, outboundMarshaler, w, req, err)
			return
		}
		resp, err := request_ExampleService_Something_0(rctx, inboundMarshaler, client, req, pathParams)
		if err != nil {
			runtime.HTTPError(ctx, mux, outboundMarshaler, w, req, err)
			return
		}

		forward_ExampleService_Something_0(ctx, mux, outboundMarshaler, w, req, resp, mux.GetForwardResponseOptions()...)

	})

	mux.Handle("POST", pattern_ExampleService_Create_0, func(w http.ResponseWriter, req *http.Request, pathParams map[string]string) {
		ctx, cancel := context.WithCancel(req.Context())
		defer cancel()
		inboundMarshaler, outboundMarshaler := runtime.MarshalerForRequest(mux, req)
		rctx, err := runtime.AnnotateContext(ctx, mux, req)
		if err != nil {
			runtime.HTTPError(ctx, mux, outboundMarshaler, w, req, err)
			return
		}
		resp, err := request_ExampleService_Create_0(rctx, inboundMarshaler, client, req, pathParams)
		if err != nil {
			runtime.HTTPError(ctx, mux, outboundMarshaler, w, req, err)
			return
		}

		forward_ExampleService_Create_0(ctx, mux, outboundMarshaler, w, req, resp, mux.GetForwardResponseOptions()...)

	})

	mux.Handle("POST", pattern_ExampleService_Test_0, func(w http.ResponseWriter, req *http.Request, pathParams map[string]string) {
		ctx, cancel := context.WithCancel(req.Context())
		defer cancel()
		inboundMarshaler, outboundMarshaler := runtime.MarshalerForRequest(mux, req)
		rctx, err := runtime.AnnotateContext(ctx, mux, req)
		if err != nil {
			runtime.HTTPError(ctx, mux, outboundMarshaler, w, req, err)
			return
		}
		resp, err := request_ExampleService_Test_0(rctx, inboundMarshaler, client, req, pathParams)
		if err != nil {
			runtime.HTTPError(ctx, mux, outboundMarshaler, w, req, err)
			return
		}

		forward_ExampleService_Test_0(ctx, mux, outboundMarshaler, w, req, resp, mux.GetForwardResponseOptions()...)

	})

	return nil
}

var (
	pattern_ExampleService_Something_0 = runtime.MustPattern(runtime.NewPattern(1, []int{2, 0}, []string{"example"}, ""))

	pattern_ExampleService_Create_0 = runtime.MustPattern(runtime.NewPattern(1, []int{2, 0}, []string{"example"}, ""))

	pattern_ExampleService_Test_0 = runtime.MustPattern(runtime.NewPattern(1, []int{2, 0}, []string{"test"}, ""))
)

var (
	forward_ExampleService_Something_0 = runtime.ForwardResponseMessage

	forward_ExampleService_Create_0 = runtime.ForwardResponseMessage

	forward_ExampleService_Test_0 = runtime.ForwardResponseMessage
)
