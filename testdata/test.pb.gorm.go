// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: github.com/partitio/atlas-gentool/testdata/test.proto

/*
Package test is a generated protocol buffer package.

It is generated from these files:
	github.com/partitio/atlas-gentool/testdata/test.proto

It has these top-level messages:
	Example
*/
package test

import context "context"

import errors1 "github.com/partitio/protoc-gen-gorm/errors"
import field_mask1 "google.golang.org/genproto/protobuf/field_mask"
import gorm1 "github.com/jinzhu/gorm"
import gorm2 "github.com/partitio/atlas-app-toolkit/gorm"

import fmt "fmt"
import math "math"
import _ "google.golang.org/genproto/googleapis/api/annotations"
import _ "github.com/lyft/protoc-gen-validate/validate"
import _ "github.com/grpc-ecosystem/grpc-gateway/protoc-gen-swagger/options"
import _ "github.com/infobloxopen/protoc-gen-atlas-query-validate/options"
import _ "github.com/infobloxopen/protoc-gen-atlas-validate/options"
import _ "github.com/infobloxopen/protoc-gen-preprocess/options"

// Reference imports to suppress errors if they are not otherwise used.
var _ = fmt.Errorf
var _ = math.Inf

type ExampleORM struct {
	EmailAddress string
	UserName     string
}

var (
	ExampleEmailAddressField = "EmailAddress"
	ExampleUserNameField     = "UserName"
)

// TableName overrides the default tablename generated by GORM
func (ExampleORM) TableName() string {
	return "examples"
}

// ToORM runs the BeforeToORM hook if present, converts the fields of this
// object to ORM format, runs the AfterToORM hook, then returns the ORM object
func (m *Example) ToORM(ctx context.Context) (ExampleORM, error) {
	to := ExampleORM{}
	var err error
	if prehook, ok := interface{}(m).(ExampleWithBeforeToORM); ok {
		if err = prehook.BeforeToORM(ctx, &to); err != nil {
			return to, err
		}
	}
	to.EmailAddress = m.EmailAddress
	to.UserName = m.UserName
	if posthook, ok := interface{}(m).(ExampleWithAfterToORM); ok {
		err = posthook.AfterToORM(ctx, &to)
	}
	return to, err
}

// ToPB runs the BeforeToPB hook if present, converts the fields of this
// object to PB format, runs the AfterToPB hook, then returns the PB object
func (m *ExampleORM) ToPB(ctx context.Context) (Example, error) {
	to := Example{}
	var err error
	if prehook, ok := interface{}(m).(ExampleWithBeforeToPB); ok {
		if err = prehook.BeforeToPB(ctx, &to); err != nil {
			return to, err
		}
	}
	to.EmailAddress = m.EmailAddress
	to.UserName = m.UserName
	if posthook, ok := interface{}(m).(ExampleWithAfterToPB); ok {
		err = posthook.AfterToPB(ctx, &to)
	}
	return to, err
}

// The following are interfaces you can implement for special behavior during ORM/PB conversions
// of type Example the arg will be the target, the caller the one being converted from

// ExampleBeforeToORM called before default ToORM code
type ExampleWithBeforeToORM interface {
	BeforeToORM(context.Context, *ExampleORM) error
}

// ExampleAfterToORM called after default ToORM code
type ExampleWithAfterToORM interface {
	AfterToORM(context.Context, *ExampleORM) error
}

// ExampleBeforeToPB called before default ToPB code
type ExampleWithBeforeToPB interface {
	BeforeToPB(context.Context, *Example) error
}

// ExampleAfterToPB called after default ToPB code
type ExampleWithAfterToPB interface {
	AfterToPB(context.Context, *Example) error
}

// DefaultCreateExample executes a basic gorm create call
func DefaultCreateExample(ctx context.Context, in *Example, db *gorm1.DB) (*Example, error) {
	if in == nil {
		return nil, errors1.NilArgumentError
	}
	ormObj, err := in.ToORM(ctx)
	if err != nil {
		return nil, err
	}
	if hook, ok := interface{}(&ormObj).(ExampleORMWithBeforeCreate_); ok {
		if db, err = hook.BeforeCreate_(ctx, db); err != nil {
			return nil, err
		}
	}
	if err = db.Create(&ormObj).Error; err != nil {
		return nil, err
	}
	if hook, ok := interface{}(&ormObj).(ExampleORMWithAfterCreate_); ok {
		if err = hook.AfterCreate_(ctx, db); err != nil {
			return nil, err
		}
	}
	pbResponse, err := ormObj.ToPB(ctx)
	return &pbResponse, err
}

type ExampleORMWithBeforeCreate_ interface {
	BeforeCreate_(context.Context, *gorm1.DB) (*gorm1.DB, error)
}
type ExampleORMWithAfterCreate_ interface {
	AfterCreate_(context.Context, *gorm1.DB) error
}

// DefaultApplyFieldMaskExample patches an pbObject with patcher according to a field mask.
func DefaultApplyFieldMaskExample(ctx context.Context, patchee *Example, patcher *Example, updateMask *field_mask1.FieldMask, prefix string, db *gorm1.DB) (*Example, error) {
	if patcher == nil {
		return nil, nil
	} else if patchee == nil {
		return nil, errors1.NilArgumentError
	}
	var err error
	for _, f := range updateMask.Paths {
		if f == prefix+"EmailAddress" {
			patchee.EmailAddress = patcher.EmailAddress
			continue
		}
		if f == prefix+"UserName" {
			patchee.UserName = patcher.UserName
			continue
		}
	}
	if err != nil {
		return nil, err
	}
	return patchee, nil
}

// DefaultListExample executes a gorm list call
func DefaultListExample(ctx context.Context, db *gorm1.DB) ([]*Example, error) {
	in := Example{}
	ormObj, err := in.ToORM(ctx)
	if err != nil {
		return nil, err
	}
	if hook, ok := interface{}(&ormObj).(ExampleORMWithBeforeListApplyQuery); ok {
		if db, err = hook.BeforeListApplyQuery(ctx, db); err != nil {
			return nil, err
		}
	}
	db, err = gorm2.ApplyCollectionOperators(ctx, db, &ExampleORM{}, &Example{}, nil, nil, nil, nil)
	if err != nil {
		return nil, err
	}
	if hook, ok := interface{}(&ormObj).(ExampleORMWithBeforeListFind); ok {
		if db, err = hook.BeforeListFind(ctx, db); err != nil {
			return nil, err
		}
	}
	db = db.Where(&ormObj)
	ormResponse := []ExampleORM{}
	if err := db.Find(&ormResponse).Error; err != nil {
		return nil, err
	}
	if hook, ok := interface{}(&ormObj).(ExampleORMWithAfterListFind); ok {
		if err = hook.AfterListFind(ctx, db, &ormResponse); err != nil {
			return nil, err
		}
	}
	pbResponse := []*Example{}
	for _, responseEntry := range ormResponse {
		temp, err := responseEntry.ToPB(ctx)
		if err != nil {
			return nil, err
		}
		pbResponse = append(pbResponse, &temp)
	}
	return pbResponse, nil
}

type ExampleORMWithBeforeListApplyQuery interface {
	BeforeListApplyQuery(context.Context, *gorm1.DB) (*gorm1.DB, error)
}
type ExampleORMWithBeforeListFind interface {
	BeforeListFind(context.Context, *gorm1.DB) (*gorm1.DB, error)
}
type ExampleORMWithAfterListFind interface {
	AfterListFind(context.Context, *gorm1.DB, *[]ExampleORM) error
}
